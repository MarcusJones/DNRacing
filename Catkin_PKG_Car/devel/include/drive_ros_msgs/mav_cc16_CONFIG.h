// Generated by gencpp from file drive_ros_msgs/mav_cc16_CONFIG.msg
// DO NOT EDIT!


#ifndef DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_CONFIG_H
#define DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drive_ros_msgs
{
template <class ContainerAllocator>
struct mav_cc16_CONFIG_
{
  typedef mav_cc16_CONFIG_<ContainerAllocator> Type;

  mav_cc16_CONFIG_()
    : sysid(0)
    , compid(0)
    , config_id(0)
    , name()
    , param_id_mask(0)  {
      name.assign(0);
  }
  mav_cc16_CONFIG_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , config_id(0)
    , name()
    , param_id_mask(0)  {
  (void)_alloc;
      name.assign(0);
  }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef uint8_t _config_id_type;
  _config_id_type config_id;

   typedef boost::array<uint8_t, 30>  _name_type;
  _name_type name;

   typedef uint16_t _param_id_mask_type;
  _param_id_mask_type param_id_mask;


    enum { ID = 196u };
 

  typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> const> ConstPtr;

}; // struct mav_cc16_CONFIG_

typedef ::drive_ros_msgs::mav_cc16_CONFIG_<std::allocator<void> > mav_cc16_CONFIG;

typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_CONFIG > mav_cc16_CONFIGPtr;
typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_CONFIG const> mav_cc16_CONFIGConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drive_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'drive_ros_msgs': ['/home/nvidia/catkin_ws/src/drive_ros_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0173aab5bcc4cc9e033c6fccf6233937";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0173aab5bcc4cc9eULL;
  static const uint64_t static_value2 = 0x033c6fccf6233937ULL;
};

template<class ContainerAllocator>
struct DataType< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drive_ros_msgs/mav_cc16_CONFIG";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2017-06-12 22:33:47.453109\n\
# MESSAGE: CONFIG\n\
# Description:Config set information\n\
uint8 ID = 196\n\
uint8 sysid\n\
uint8 compid\n\
\n\
uint8 config_id         # ID of the configuration set\n\
char[30] name           # Name of the configuration set\n\
uint16 param_id_mask    # Bitmask indicating which param ids are used (LSB = id 0)\n\
";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.config_id);
      stream.next(m.name);
      stream.next(m.param_id_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mav_cc16_CONFIG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drive_ros_msgs::mav_cc16_CONFIG_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "config_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.config_id);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "param_id_mask: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.param_id_mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_CONFIG_H
