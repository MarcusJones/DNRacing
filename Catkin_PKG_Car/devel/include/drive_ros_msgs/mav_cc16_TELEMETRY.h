// Generated by gencpp from file drive_ros_msgs/mav_cc16_TELEMETRY.msg
// DO NOT EDIT!


#ifndef DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_TELEMETRY_H
#define DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_TELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace drive_ros_msgs
{
template <class ContainerAllocator>
struct mav_cc16_TELEMETRY_
{
  typedef mav_cc16_TELEMETRY_<ContainerAllocator> Type;

  mav_cc16_TELEMETRY_()
    : header()
    , sysid(0)
    , compid(0)
    , xacc(0.0)
    , yacc(0.0)
    , zacc(0.0)
    , xgyro(0.0)
    , ygyro(0.0)
    , zgyro(0.0)
    , dist_front(0.0)
    , dist_rear(0.0)
    , dist_side(0.0)
    , odom(0.0)
    , odom_accumulated(0.0)
    , xmotion_front(0.0)
    , ymotion_front(0.0)
    , xmotion_rear(0.0)
    , ymotion_rear(0.0)
    , motion_front_quality(0)
    , motion_rear_quality(0)
    , current_motor(0)
    , current_servo_front(0)
    , current_servo_rear(0)
    , current_total(0)
    , pwm_servo_front(0)
    , pwm_servo_rear(0)
    , battery_voltage(0)
    , remote_control(0)
    , drive_mode(0)  {
    }
  mav_cc16_TELEMETRY_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sysid(0)
    , compid(0)
    , xacc(0.0)
    , yacc(0.0)
    , zacc(0.0)
    , xgyro(0.0)
    , ygyro(0.0)
    , zgyro(0.0)
    , dist_front(0.0)
    , dist_rear(0.0)
    , dist_side(0.0)
    , odom(0.0)
    , odom_accumulated(0.0)
    , xmotion_front(0.0)
    , ymotion_front(0.0)
    , xmotion_rear(0.0)
    , ymotion_rear(0.0)
    , motion_front_quality(0)
    , motion_rear_quality(0)
    , current_motor(0)
    , current_servo_front(0)
    , current_servo_rear(0)
    , current_total(0)
    , pwm_servo_front(0)
    , pwm_servo_rear(0)
    , battery_voltage(0)
    , remote_control(0)
    , drive_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef float _xacc_type;
  _xacc_type xacc;

   typedef float _yacc_type;
  _yacc_type yacc;

   typedef float _zacc_type;
  _zacc_type zacc;

   typedef float _xgyro_type;
  _xgyro_type xgyro;

   typedef float _ygyro_type;
  _ygyro_type ygyro;

   typedef float _zgyro_type;
  _zgyro_type zgyro;

   typedef float _dist_front_type;
  _dist_front_type dist_front;

   typedef float _dist_rear_type;
  _dist_rear_type dist_rear;

   typedef float _dist_side_type;
  _dist_side_type dist_side;

   typedef float _odom_type;
  _odom_type odom;

   typedef float _odom_accumulated_type;
  _odom_accumulated_type odom_accumulated;

   typedef float _xmotion_front_type;
  _xmotion_front_type xmotion_front;

   typedef float _ymotion_front_type;
  _ymotion_front_type ymotion_front;

   typedef float _xmotion_rear_type;
  _xmotion_rear_type xmotion_rear;

   typedef float _ymotion_rear_type;
  _ymotion_rear_type ymotion_rear;

   typedef uint8_t _motion_front_quality_type;
  _motion_front_quality_type motion_front_quality;

   typedef uint8_t _motion_rear_quality_type;
  _motion_rear_quality_type motion_rear_quality;

   typedef int32_t _current_motor_type;
  _current_motor_type current_motor;

   typedef uint16_t _current_servo_front_type;
  _current_servo_front_type current_servo_front;

   typedef uint16_t _current_servo_rear_type;
  _current_servo_rear_type current_servo_rear;

   typedef uint16_t _current_total_type;
  _current_total_type current_total;

   typedef uint16_t _pwm_servo_front_type;
  _pwm_servo_front_type pwm_servo_front;

   typedef uint16_t _pwm_servo_rear_type;
  _pwm_servo_rear_type pwm_servo_rear;

   typedef uint16_t _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef uint8_t _remote_control_type;
  _remote_control_type remote_control;

   typedef uint8_t _drive_mode_type;
  _drive_mode_type drive_mode;


    enum { ID = 3u };
     enum { REMOTE_CONTROL_STATUS_DISCONNECTED = 0u };
     enum { REMOTE_CONTROL_STATUS_CONNECTED = 1u };
     enum { REMOTE_CONTROL_STATUS_AUTONOMOUS = 2u };
     enum { REMOTE_CONTROL_STATUS_SEMI_AUTONOMOUS = 3u };
     enum { REMOTE_CONTROL_STATUS_MANUAL = 4u };
     enum { DRIVE_MODE_TRACK = 0u };
     enum { DRIVE_MODE_TRACK_OBSTACLES = 1u };
     enum { DRIVE_MODE_PARKING = 2u };
     enum { DRIVE_MODE_IDLE = 3u };
 

  typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> const> ConstPtr;

}; // struct mav_cc16_TELEMETRY_

typedef ::drive_ros_msgs::mav_cc16_TELEMETRY_<std::allocator<void> > mav_cc16_TELEMETRY;

typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_TELEMETRY > mav_cc16_TELEMETRYPtr;
typedef boost::shared_ptr< ::drive_ros_msgs::mav_cc16_TELEMETRY const> mav_cc16_TELEMETRYConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drive_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'drive_ros_msgs': ['/home/nvidia/catkin_ws/src/drive_ros_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "432f9dfb0037d5f65f83be8d10976087";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x432f9dfb0037d5f6ULL;
  static const uint64_t static_value2 = 0x5f83be8d10976087ULL;
};

template<class ContainerAllocator>
struct DataType< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drive_ros_msgs/mav_cc16_TELEMETRY";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2017-06-12 22:33:47.452753\n\
# MESSAGE: TELEMETRY\n\
# Description:Telemetry\n\
Header header\n\
\n\
uint8 ID = 3\n\
uint8 sysid\n\
uint8 compid\n\
\n\
float32 xacc\n\
float32 yacc\n\
float32 zacc\n\
float32 xgyro\n\
float32 ygyro\n\
float32 zgyro\n\
float32 dist_front\n\
float32 dist_rear\n\
float32 dist_side\n\
float32 odom\n\
float32 odom_accumulated\n\
float32 xmotion_front\n\
float32 ymotion_front\n\
float32 xmotion_rear\n\
float32 ymotion_rear\n\
uint8 motion_front_quality\n\
uint8 motion_rear_quality\n\
int32 current_motor\n\
uint16 current_servo_front\n\
uint16 current_servo_rear\n\
uint16 current_total\n\
uint16 pwm_servo_front\n\
uint16 pwm_servo_rear\n\
uint16 battery_voltage\n\
uint8 remote_control\n\
uint8 drive_mode\n\
\n\
\n\
uint8 REMOTE_CONTROL_STATUS_DISCONNECTED = 0     # Remote Control is not connected to the system\n\
uint8 REMOTE_CONTROL_STATUS_CONNECTED = 1        # Remote Control connection is established\n\
uint8 REMOTE_CONTROL_STATUS_AUTONOMOUS = 2       # Remote Control is connected and under active control\n\
uint8 REMOTE_CONTROL_STATUS_SEMI_AUTONOMOUS = 3  # Remote Control is connected and under active control\n\
uint8 REMOTE_CONTROL_STATUS_MANUAL = 4           # Remote Control is connected and under active control\n\
\n\
\n\
uint8 DRIVE_MODE_TRACK = 0              # Track (excluding obstacles)\n\
uint8 DRIVE_MODE_TRACK_OBSTACLES = 1    # Track including obstacles\n\
uint8 DRIVE_MODE_PARKING = 2            # Parking mode\n\
uint8 DRIVE_MODE_IDLE = 3               # Idle mode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.xacc);
      stream.next(m.yacc);
      stream.next(m.zacc);
      stream.next(m.xgyro);
      stream.next(m.ygyro);
      stream.next(m.zgyro);
      stream.next(m.dist_front);
      stream.next(m.dist_rear);
      stream.next(m.dist_side);
      stream.next(m.odom);
      stream.next(m.odom_accumulated);
      stream.next(m.xmotion_front);
      stream.next(m.ymotion_front);
      stream.next(m.xmotion_rear);
      stream.next(m.ymotion_rear);
      stream.next(m.motion_front_quality);
      stream.next(m.motion_rear_quality);
      stream.next(m.current_motor);
      stream.next(m.current_servo_front);
      stream.next(m.current_servo_rear);
      stream.next(m.current_total);
      stream.next(m.pwm_servo_front);
      stream.next(m.pwm_servo_rear);
      stream.next(m.battery_voltage);
      stream.next(m.remote_control);
      stream.next(m.drive_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mav_cc16_TELEMETRY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drive_ros_msgs::mav_cc16_TELEMETRY_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "xacc: ";
    Printer<float>::stream(s, indent + "  ", v.xacc);
    s << indent << "yacc: ";
    Printer<float>::stream(s, indent + "  ", v.yacc);
    s << indent << "zacc: ";
    Printer<float>::stream(s, indent + "  ", v.zacc);
    s << indent << "xgyro: ";
    Printer<float>::stream(s, indent + "  ", v.xgyro);
    s << indent << "ygyro: ";
    Printer<float>::stream(s, indent + "  ", v.ygyro);
    s << indent << "zgyro: ";
    Printer<float>::stream(s, indent + "  ", v.zgyro);
    s << indent << "dist_front: ";
    Printer<float>::stream(s, indent + "  ", v.dist_front);
    s << indent << "dist_rear: ";
    Printer<float>::stream(s, indent + "  ", v.dist_rear);
    s << indent << "dist_side: ";
    Printer<float>::stream(s, indent + "  ", v.dist_side);
    s << indent << "odom: ";
    Printer<float>::stream(s, indent + "  ", v.odom);
    s << indent << "odom_accumulated: ";
    Printer<float>::stream(s, indent + "  ", v.odom_accumulated);
    s << indent << "xmotion_front: ";
    Printer<float>::stream(s, indent + "  ", v.xmotion_front);
    s << indent << "ymotion_front: ";
    Printer<float>::stream(s, indent + "  ", v.ymotion_front);
    s << indent << "xmotion_rear: ";
    Printer<float>::stream(s, indent + "  ", v.xmotion_rear);
    s << indent << "ymotion_rear: ";
    Printer<float>::stream(s, indent + "  ", v.ymotion_rear);
    s << indent << "motion_front_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_front_quality);
    s << indent << "motion_rear_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_rear_quality);
    s << indent << "current_motor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_motor);
    s << indent << "current_servo_front: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_servo_front);
    s << indent << "current_servo_rear: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_servo_rear);
    s << indent << "current_total: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_total);
    s << indent << "pwm_servo_front: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_servo_front);
    s << indent << "pwm_servo_rear: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_servo_rear);
    s << indent << "battery_voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "remote_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remote_control);
    s << indent << "drive_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVE_ROS_MSGS_MESSAGE_MAV_CC16_TELEMETRY_H
