# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drive_ros_msgs/mav_cc16_CONFIG_PARAM_INT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mav_cc16_CONFIG_PARAM_INT(genpy.Message):
  _md5sum = "bc2b28cc35fff8757eeaf17d547ba182"
  _type = "drive_ros_msgs/mav_cc16_CONFIG_PARAM_INT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2017-06-12 22:33:47.453127
# MESSAGE: CONFIG_PARAM_INT
# Description:Config parameter information for int param
uint8 ID = 197
uint8 sysid
uint8 compid

uint8 config_id         # ID of the configuration set
uint8 param_id          # ID of the configuration parameter within the config set
char[30] name           # Name of the configuration parameter
int32 value             # Current parameter value
int32 default_value     # default parameter value
int32 min               # Minimum parameter value
int32 max               # Maximum parameter value
"""
  # Pseudo-constants
  ID = 197

  __slots__ = ['sysid','compid','config_id','param_id','name','value','default_value','min','max']
  _slot_types = ['uint8','uint8','uint8','uint8','char[30]','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,config_id,param_id,name,value,default_value,min,max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mav_cc16_CONFIG_PARAM_INT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.config_id is None:
        self.config_id = 0
      if self.param_id is None:
        self.param_id = 0
      if self.name is None:
        self.name = b'\0'*30
      if self.value is None:
        self.value = 0
      if self.default_value is None:
        self.default_value = 0
      if self.min is None:
        self.min = 0
      if self.max is None:
        self.max = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.config_id = 0
      self.param_id = 0
      self.name = b'\0'*30
      self.value = 0
      self.default_value = 0
      self.min = 0
      self.max = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.sysid, _x.compid, _x.config_id, _x.param_id))
      _x = self.name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.value, _x.default_value, _x.min, _x.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.config_id, _x.param_id,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 30
      self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value, _x.default_value, _x.min, _x.max,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.sysid, _x.compid, _x.config_id, _x.param_id))
      _x = self.name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.value, _x.default_value, _x.min, _x.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.config_id, _x.param_id,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 30
      self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value, _x.default_value, _x.min, _x.max,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_30B = None
def _get_struct_30B():
    global _struct_30B
    if _struct_30B is None:
        _struct_30B = struct.Struct("<30B")
    return _struct_30B
_struct_30s = None
def _get_struct_30s():
    global _struct_30s
    if _struct_30s is None:
        _struct_30s = struct.Struct("<30s")
    return _struct_30s
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
