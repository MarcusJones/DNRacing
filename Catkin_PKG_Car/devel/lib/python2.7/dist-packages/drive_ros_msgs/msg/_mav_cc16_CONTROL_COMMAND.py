# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drive_ros_msgs/mav_cc16_CONTROL_COMMAND.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mav_cc16_CONTROL_COMMAND(genpy.Message):
  _md5sum = "db3d4778273e5bde28a0418e456620d4"
  _type = "drive_ros_msgs/mav_cc16_CONTROL_COMMAND"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2017-06-12 22:33:47.452827
# MESSAGE: CONTROL_COMMAND
# Description: Control command data
uint8 ID = 64
uint8 sysid
uint8 compid

float32 velocity            # Desired velocity [m/s]
float32 steering_front      # Front axle steering angle [rad]
float32 steering_rear       # Rear axle steering angle [rad]
uint8 indicator_left        # Left turn signal indicator
uint8 indicator_right       # Right turn signal indicator

uint8 INDICATOR_OFF = 0 # turn indicator off
uint8 INDICATOR_ON  = 1 # turn indicator on
"""
  # Pseudo-constants
  ID = 64
  INDICATOR_OFF = 0
  INDICATOR_ON = 1

  __slots__ = ['sysid','compid','velocity','steering_front','steering_rear','indicator_left','indicator_right']
  _slot_types = ['uint8','uint8','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,velocity,steering_front,steering_rear,indicator_left,indicator_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mav_cc16_CONTROL_COMMAND, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.steering_front is None:
        self.steering_front = 0.
      if self.steering_rear is None:
        self.steering_rear = 0.
      if self.indicator_left is None:
        self.indicator_left = 0
      if self.indicator_right is None:
        self.indicator_right = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.velocity = 0.
      self.steering_front = 0.
      self.steering_rear = 0.
      self.indicator_left = 0
      self.indicator_right = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3f2B().pack(_x.sysid, _x.compid, _x.velocity, _x.steering_front, _x.steering_rear, _x.indicator_left, _x.indicator_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sysid, _x.compid, _x.velocity, _x.steering_front, _x.steering_rear, _x.indicator_left, _x.indicator_right,) = _get_struct_2B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3f2B().pack(_x.sysid, _x.compid, _x.velocity, _x.steering_front, _x.steering_rear, _x.indicator_left, _x.indicator_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sysid, _x.compid, _x.velocity, _x.steering_front, _x.steering_rear, _x.indicator_left, _x.indicator_right,) = _get_struct_2B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3f2B = None
def _get_struct_2B3f2B():
    global _struct_2B3f2B
    if _struct_2B3f2B is None:
        _struct_2B3f2B = struct.Struct("<2B3f2B")
    return _struct_2B3f2B
