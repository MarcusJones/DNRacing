# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drive_ros_msgs/mav_cc16_CONTROL_LIGHTS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mav_cc16_CONTROL_LIGHTS(genpy.Message):
  _md5sum = "8d6b19f83df7d1d5d31de59ee6e1ece9"
  _type = "drive_ros_msgs/mav_cc16_CONTROL_LIGHTS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2017-06-12 22:33:47.452797
# MESSAGE: CONTROL_LIGHTS
# Description:RGB lights
uint8 ID = 32
uint8 sysid
uint8 compid

uint32[15] colors   # Colors-4 bytes, r,g,b, nothing
"""
  # Pseudo-constants
  ID = 32

  __slots__ = ['sysid','compid','colors']
  _slot_types = ['uint8','uint8','uint32[15]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,colors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mav_cc16_CONTROL_LIGHTS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.colors is None:
        self.colors = [0] * 15
    else:
      self.sysid = 0
      self.compid = 0
      self.colors = [0] * 15

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.sysid, _x.compid))
      buff.write(_get_struct_15I().pack(*self.colors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 60
      self.colors = _get_struct_15I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.sysid, _x.compid))
      buff.write(self.colors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 60
      self.colors = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=15)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15I = None
def _get_struct_15I():
    global _struct_15I
    if _struct_15I is None:
        _struct_15I = struct.Struct("<15I")
    return _struct_15I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
